{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder _store_builder_ref(builder to, builder what) asm(what to) "STBREF";


(builder) rec(tuple t, slice string) {
  builder res = begin_cell();
  repeat (string.slice_bits() / 40) {
    (int a, int b, int c, int d, int e) = (string~load_uint(8), string~load_uint(8), string~load_uint(8), string~load_uint(8), string~load_uint(8));
    ;; res~store_uint((((((t.at(a) << 8) | t.at(b)) << 8) | t.at(c)) << 8) | t.at(d), 32);
    res = res.store_uint(t.at(a), 8).store_uint(t.at(b), 8).store_uint(t.at(c), 8).store_uint(t.at(d), 8).store_uint(t.at(e), 8);
  }
  repeat (string.slice_bits() / 8) {
    int ch = string~load_uint(8);
    res = res.store_uint(t.at(ch), 8);
  }
  if (string.slice_refs()) {
    builder inner_res = rec(t, string.preload_ref().begin_parse());
    return res._store_builder_ref(inner_res);
  }

  return res;
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  tuple t = to_tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
  t~tpush(15); t~tpush(16); t~tpush(17); t~tpush(18); t~tpush(19); t~tpush(20); t~tpush(21); t~tpush(22); t~tpush(23); t~tpush(24); t~tpush(25); t~tpush(26); t~tpush(27); t~tpush(28); t~tpush(29); t~tpush(30); t~tpush(31); t~tpush(32); t~tpush(33); t~tpush(34); t~tpush(35); t~tpush(36); t~tpush(37); t~tpush(38); t~tpush(39); t~tpush(40); t~tpush(41); t~tpush(42); t~tpush(43); t~tpush(44); t~tpush(45); t~tpush(46); t~tpush(47); t~tpush(48); t~tpush(49); t~tpush(50); t~tpush(51); t~tpush(52); t~tpush(53); t~tpush(54); t~tpush(55); t~tpush(56); t~tpush(57); t~tpush(58); t~tpush(59); t~tpush(60); t~tpush(61); t~tpush(62); t~tpush(63); t~tpush(64);
  ;; int i = 0;
  t~tpush((shift % 26) + 65); t~tpush(((1 + shift) % 26) + 65); t~tpush(((2 + shift) % 26) + 65); t~tpush(((3 + shift) % 26) + 65); t~tpush(((4 + shift) % 26) + 65); t~tpush(((5 + shift) % 26) + 65); t~tpush(((6 + shift) % 26) + 65); t~tpush(((7 + shift) % 26) + 65); t~tpush(((8 + shift) % 26) + 65); t~tpush(((9 + shift) % 26) + 65); t~tpush(((10 + shift) % 26) + 65); t~tpush(((11 + shift) % 26) + 65); t~tpush(((12 + shift) % 26) + 65); t~tpush(((13 + shift) % 26) + 65); t~tpush(((14 + shift) % 26) + 65); t~tpush(((15 + shift) % 26) + 65); t~tpush(((16 + shift) % 26) + 65); t~tpush(((17 + shift) % 26) + 65); t~tpush(((18 + shift) % 26) + 65); t~tpush(((19 + shift) % 26) + 65); t~tpush(((20 + shift) % 26) + 65); t~tpush(((21 + shift) % 26) + 65); t~tpush(((22 + shift) % 26) + 65); t~tpush(((23 + shift) % 26) + 65); t~tpush(((24 + shift) % 26) + 65); t~tpush(((25 + shift) % 26) + 65);
  ;; repeat (6) { t~tpush(i); i += 1; }
  t~tpush(91); t~tpush(92); t~tpush(93); t~tpush(94); t~tpush(95); t~tpush(96);
  ;; i = 0;
  ;; repeat (26) { t~tpush(((i + shift) % 26) + 97); i += 1; }
  t~tpush((shift % 26) + 97); t~tpush(((1 + shift) % 26) + 97); t~tpush(((2 + shift) % 26) + 97); t~tpush(((3 + shift) % 26) + 97); t~tpush(((4 + shift) % 26) + 97); t~tpush(((5 + shift) % 26) + 97); t~tpush(((6 + shift) % 26) + 97); t~tpush(((7 + shift) % 26) + 97); t~tpush(((8 + shift) % 26) + 97); t~tpush(((9 + shift) % 26) + 97); t~tpush(((10 + shift) % 26) + 97); t~tpush(((11 + shift) % 26) + 97); t~tpush(((12 + shift) % 26) + 97); t~tpush(((13 + shift) % 26) + 97); t~tpush(((14 + shift) % 26) + 97); t~tpush(((15 + shift) % 26) + 97); t~tpush(((16 + shift) % 26) + 97); t~tpush(((17 + shift) % 26) + 97); t~tpush(((18 + shift) % 26) + 97); t~tpush(((19 + shift) % 26) + 97); t~tpush(((20 + shift) % 26) + 97); t~tpush(((21 + shift) % 26) + 97); t~tpush(((22 + shift) % 26) + 97); t~tpush(((23 + shift) % 26) + 97); t~tpush(((24 + shift) % 26) + 97); t~tpush(((25 + shift) % 26) + 97);
  ;; repeat (95) { t~tpush(i); i += 1; }
  t~tpush(123); t~tpush(124); t~tpush(125); t~tpush(126); t~tpush(127); t~tpush(128); t~tpush(129); t~tpush(130); t~tpush(131); t~tpush(132); t~tpush(133); t~tpush(134); t~tpush(135); t~tpush(136); t~tpush(137); t~tpush(138); t~tpush(139); t~tpush(140); t~tpush(141); t~tpush(142); t~tpush(143); t~tpush(144); t~tpush(145); t~tpush(146); t~tpush(147); t~tpush(148); t~tpush(149); t~tpush(150); t~tpush(151); t~tpush(152); t~tpush(153); t~tpush(154); t~tpush(155); t~tpush(156); t~tpush(157); t~tpush(158); t~tpush(159); t~tpush(160); t~tpush(161); t~tpush(162); t~tpush(163); t~tpush(164); t~tpush(165); t~tpush(166); t~tpush(167); t~tpush(168); t~tpush(169); t~tpush(170); t~tpush(171); t~tpush(172); t~tpush(173); t~tpush(174); t~tpush(175); t~tpush(176); t~tpush(177); t~tpush(178); t~tpush(179); t~tpush(180); t~tpush(181); t~tpush(182); t~tpush(183); t~tpush(184); t~tpush(185); t~tpush(186); t~tpush(187); t~tpush(188); t~tpush(189); t~tpush(190); t~tpush(191); t~tpush(192); t~tpush(193); t~tpush(194); t~tpush(195); t~tpush(196); t~tpush(197); t~tpush(198); t~tpush(199); t~tpush(200); t~tpush(201); t~tpush(202); t~tpush(203); t~tpush(204); t~tpush(205); t~tpush(206); t~tpush(207); t~tpush(208); t~tpush(209); t~tpush(210); t~tpush(211); t~tpush(212); t~tpush(213); t~tpush(214); t~tpush(215); t~tpush(216); t~tpush(217); t~tpush(218); t~tpush(219);

  slice string = text.begin_parse();
  string~skip_bits(32);
  return begin_cell()
    .store_uint(0, 32)
    .store_builder(rec(t, string))
  .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  tuple t = to_tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
  t~tpush(15); t~tpush(16); t~tpush(17); t~tpush(18); t~tpush(19); t~tpush(20); t~tpush(21); t~tpush(22); t~tpush(23); t~tpush(24); t~tpush(25); t~tpush(26); t~tpush(27); t~tpush(28); t~tpush(29); t~tpush(30); t~tpush(31); t~tpush(32); t~tpush(33); t~tpush(34); t~tpush(35); t~tpush(36); t~tpush(37); t~tpush(38); t~tpush(39); t~tpush(40); t~tpush(41); t~tpush(42); t~tpush(43); t~tpush(44); t~tpush(45); t~tpush(46); t~tpush(47); t~tpush(48); t~tpush(49); t~tpush(50); t~tpush(51); t~tpush(52); t~tpush(53); t~tpush(54); t~tpush(55); t~tpush(56); t~tpush(57); t~tpush(58); t~tpush(59); t~tpush(60); t~tpush(61); t~tpush(62); t~tpush(63); t~tpush(64);
  ;; int i = 0;
  ;; repeat (26) { t~tpush(65 + ((i - shift) % 26)); i += 1; }
  t~tpush(((0 - shift) % 26) + 65); t~tpush(((1 - shift) % 26) + 65); t~tpush(((2 - shift) % 26) + 65); t~tpush(((3 - shift) % 26) + 65); t~tpush(((4 - shift) % 26) + 65); t~tpush(((5 - shift) % 26) + 65); t~tpush(((6 - shift) % 26) + 65); t~tpush(((7 - shift) % 26) + 65); t~tpush(((8 - shift) % 26) + 65); t~tpush(((9 - shift) % 26) + 65); t~tpush(((10 - shift) % 26) + 65); t~tpush(((11 - shift) % 26) + 65); t~tpush(((12 - shift) % 26) + 65); t~tpush(((13 - shift) % 26) + 65); t~tpush(((14 - shift) % 26) + 65); t~tpush(((15 - shift) % 26) + 65); t~tpush(((16 - shift) % 26) + 65); t~tpush(((17 - shift) % 26) + 65); t~tpush(((18 - shift) % 26) + 65); t~tpush(((19 - shift) % 26) + 65); t~tpush(((20 - shift) % 26) + 65); t~tpush(((21 - shift) % 26) + 65); t~tpush(((22 - shift) % 26) + 65); t~tpush(((23 - shift) % 26) + 65); t~tpush(((24 - shift) % 26) + 65); t~tpush(((25 - shift) % 26) + 65);
  ;; repeat (6) { t~tpush(i); i += 1; }
  t~tpush(91); t~tpush(92); t~tpush(93); t~tpush(94); t~tpush(95); t~tpush(96);
  ;; repeat (26) { t~tpush(((i - shift) % 26) + 97); i += 1; }
  t~tpush(((0 - shift) % 26) + 97); t~tpush(((1 - shift) % 26) + 97); t~tpush(((2 - shift) % 26) + 97); t~tpush(((3 - shift) % 26) + 97); t~tpush(((4 - shift) % 26) + 97); t~tpush(((5 - shift) % 26) + 97); t~tpush(((6 - shift) % 26) + 97); t~tpush(((7 - shift) % 26) + 97); t~tpush(((8 - shift) % 26) + 97); t~tpush(((9 - shift) % 26) + 97); t~tpush(((10 - shift) % 26) + 97); t~tpush(((11 - shift) % 26) + 97); t~tpush(((12 - shift) % 26) + 97); t~tpush(((13 - shift) % 26) + 97); t~tpush(((14 - shift) % 26) + 97); t~tpush(((15 - shift) % 26) + 97); t~tpush(((16 - shift) % 26) + 97); t~tpush(((17 - shift) % 26) + 97); t~tpush(((18 - shift) % 26) + 97); t~tpush(((19 - shift) % 26) + 97); t~tpush(((20 - shift) % 26) + 97); t~tpush(((21 - shift) % 26) + 97); t~tpush(((22 - shift) % 26) + 97); t~tpush(((23 - shift) % 26) + 97); t~tpush(((24 - shift) % 26) + 97); t~tpush(((25 - shift) % 26) + 97);
  ;; repeat (95) { t~tpush(i); i += 1; }
  t~tpush(123); t~tpush(124); t~tpush(125); t~tpush(126); t~tpush(127); t~tpush(128); t~tpush(129); t~tpush(130); t~tpush(131); t~tpush(132); t~tpush(133); t~tpush(134); t~tpush(135); t~tpush(136); t~tpush(137); t~tpush(138); t~tpush(139); t~tpush(140); t~tpush(141); t~tpush(142); t~tpush(143); t~tpush(144); t~tpush(145); t~tpush(146); t~tpush(147); t~tpush(148); t~tpush(149); t~tpush(150); t~tpush(151); t~tpush(152); t~tpush(153); t~tpush(154); t~tpush(155); t~tpush(156); t~tpush(157); t~tpush(158); t~tpush(159); t~tpush(160); t~tpush(161); t~tpush(162); t~tpush(163); t~tpush(164); t~tpush(165); t~tpush(166); t~tpush(167); t~tpush(168); t~tpush(169); t~tpush(170); t~tpush(171); t~tpush(172); t~tpush(173); t~tpush(174); t~tpush(175); t~tpush(176); t~tpush(177); t~tpush(178); t~tpush(179); t~tpush(180); t~tpush(181); t~tpush(182); t~tpush(183); t~tpush(184); t~tpush(185); t~tpush(186); t~tpush(187); t~tpush(188); t~tpush(189); t~tpush(190); t~tpush(191); t~tpush(192); t~tpush(193); t~tpush(194); t~tpush(195); t~tpush(196); t~tpush(197); t~tpush(198); t~tpush(199); t~tpush(200); t~tpush(201); t~tpush(202); t~tpush(203); t~tpush(204); t~tpush(205); t~tpush(206); t~tpush(207); t~tpush(208); t~tpush(209); t~tpush(210); t~tpush(211); t~tpush(212); t~tpush(213); t~tpush(214); t~tpush(215); t~tpush(216); t~tpush(217); t~tpush(218); t~tpush(219);
  slice string = text.begin_parse();
  string~skip_bits(32);
  return begin_cell()
    .store_uint(0, 32)
    .store_builder(rec(t, string))
    .end_cell();
}
