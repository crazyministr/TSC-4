{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

;; int tlen(tuple t) asm "TLEN";
forall X -> int is_null?(X x) asm "ISNULL";
;; forall X -> X back(tuple) asm "LAST";

{-
(cell) rec(int hash, cell tree) {
  if (cell_hash(tree) == hash) {
    return tree;
  }
  slice node = tree.begin_parse();
  repeat (node.slice_refs()) {
    cell found_cell = rec(hash, node~load_ref());
    if (~ found_cell.cell_null?()) {
      return found_cell;
    }
  }
  return null();
}
-}


cell solve (int hash, cell tree) asm """
    SAMEALTSAVE
    PUSHNULL	//  hash tree deque
    CONS	//  hash deque
    UNTIL:<{
      UNCONS	//  hash tree deque
      OVER	//  hash tree deque tree
      HASHCU	//  hash tree deque _6
      s3 PUSH	//  hash tree deque _6 hash
      EQUAL	//  hash tree deque _7
      IFJMP:<{	//  hash tree deque
        DROP
        NIP	//  tree
        RETALT
      }>	//  hash tree deque
      SWAP	//  hash deque tree
      CTOS	//  hash deque node
      DUP	//  hash deque node node
      SREFS	//  hash deque node _10
      REPEAT:<{	//  hash deque node
        LDREF	//  hash deque _11 node
        s0 s2 XCHG	//  hash node _11 deque
        CONS	//  hash node deque
        SWAP	//  hash deque node
      }>
      DROP	//  hash deque
      DUP	//  hash deque deque
      ISNULL	//  hash deque _14
    }>	//  hash deque
    2DROP	// 
    NEWC	//  _15
    ENDC	//  _16
""";


cell solve::2 (int hash, cell tree) asm """
    SAMEALTSAVE
    PUSHNULL	//  hash tree deque
    CONS	//  hash deque
    UNTIL:<{
      UNCONS	//  hash tree deque
      SWAP // hash deque tree
      DUP  // hash deque tree tree
      HASHCU	//  hash deque tree _6
      s3 PUSH	//  hash deque tree _6 hash
      EQUAL	//  hash deque tree _7
      IFJMP:<{	//  hash deque tree
         c1 PUSH
         1 JMPXARGS
         // NIP	//  tree
         // NIP
          RETALT
      }>	//  hash deque tree
      CTOS	//  hash deque node
      DUP	//  hash deque node node
      SREFS	//  hash deque node _10
      REPEAT:<{	//  hash deque node
        LDREF	//  hash deque _11 node
        s0 s2 XCHG	//  hash node _11 deque
        CONS	//  hash node deque
        SWAP	//  hash deque node
      }>
      DROP	//  hash deque
      DUP	//  hash deque deque
      ISNULL	//  hash deque _14
    }>	//  hash deque
    2DROP	// 
    NEWC	//  _15
    ENDC	//  _16
""";


;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  ;; return solve (hash, tree);
  return solve::2 (hash, tree);
  ;; tuple deque = null();
  ;; deque = cons(tree, deque);
  
  ;; do {
  ;;   (tree, deque) = uncons(deque);
  ;;   if (cell_hash(tree) == hash) {
  ;;     return tree;
  ;;   }
  ;;   slice node = tree.begin_parse();
  ;;   repeat (node.slice_refs()) {
  ;;     deque = cons(node~load_ref(), deque);
  ;;   }
  ;; } until (is_null?(deque));
  ;; return begin_cell().end_cell();
}
