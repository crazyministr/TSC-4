{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

{-
slice encode_number_to_text(int number) {
    builder text_b = begin_cell();
    if (number < 0) {
        text_b = text_b.store_slice("-");
        number = - number;
    }
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);

    slice text = text_b.store_uint(value, len * 8).end_cell().begin_parse();
    return text;
}

;; To disable log - remove impure to all functions
;; To enable log - add impure to all functions
forall X -> X ~strdump_safe_not_pretty(slice value) impure asm "STRDUMP";
forall X -> X ~dump_safe(X value) impure asm "s0 DUMP";

_ ~strdump_safe(slice text) impure {
    slice text_extended = begin_cell()
            .store_slice("[🌊] ")
            .store_slice(text)
            .end_cell()
            .begin_parse();

    ~strdump_safe_not_pretty(text_extended);
}

_ ~strdump_value(slice text, var value) impure {
    slice text_extended = begin_cell().store_slice("[🍭] ")
            .store_slice(text)
            .store_slice(": ")
            .end_cell()
            .begin_parse();
    ~strdump_safe_not_pretty(text_extended);
    ~dump_safe(value);
}

_ ~strdump_int(slice text, int value) impure {
    slice text_extended = begin_cell()
            .store_slice("[👀] ")
            .store_slice(text)
            .store_slice(": ")
            .store_slice(encode_number_to_text(value))
            .end_cell().begin_parse();
    ~strdump_safe_not_pretty(text_extended);
}
-}

() recv_internal() {
}


(int) ubitsize (int a) asm "UBITSIZE";
forall X -> int is_null?(X x) asm "ISNULL";
forall X -> (tuple, X) ~pop_back(tuple t) asm "TPOP";
builder _store_builder_ref(builder to, builder what) asm(what to) "STBREF";


(builder) rec(int flag, int flag_len, int value, int buffer, int buffer_len, cell llist) {
  slice cs = llist.begin_parse();

  ;; read up to `flag_len - 1` bits
  int bits_to_read = min(cs.slice_bits(), flag_len - buffer_len - 1);
  if (bits_to_read > 0) {
    buffer = (buffer << bits_to_read) | cs~load_uint(bits_to_read);
    buffer_len += bits_to_read;
  }

  int stack_len = 0;
  tuple stack = empty_tuple();
  builder preb = begin_cell();
  cs~touch();
  while (cs.slice_bits()) {
    int bit = cs~load_uint(1);

    if (buffer_len == flag_len) {  ;; shift buffer
      int first_bit_pos = 1 << (buffer_len - 1);
      int first_bit = buffer & first_bit_pos;
      buffer ^= first_bit;
      int to_store_bit = 0;
      if (first_bit) {
        to_store_bit = 1;
      }
      if (preb.builder_bits() < 1023) {  ;; + 1 < 1024
        preb = preb.store_uint(to_store_bit, 1);
      } else {
        stack~tpush(preb);
        stack_len += 1;
        preb = begin_cell().store_uint(to_store_bit, 1);
      }
    } else {
      buffer_len += 1;
    }
    buffer = (buffer << 1) | bit;
    if (buffer == flag) {
      int value_bits = ubitsize(value);
      if (preb.builder_bits() + value_bits < 1024) {
        preb = preb.store_uint(value, value_bits);
      } else {
        int bits_left = 1023 - preb.builder_bits();
        if (bits_left) {
          int l = value_bits - bits_left;
          stack~tpush(preb.store_uint(value >> l, bits_left));
          stack_len += 1;
          preb = begin_cell().store_uint(value & ((1 << l) - 1), l);
        } else {
          stack~tpush(preb);
          stack_len += 1;
          preb = begin_cell().store_uint(value, value_bits);
        }
      }
      (buffer, buffer_len) = (0, 0);

      bits_to_read = min(cs.slice_bits(), flag_len - 1);
      if (bits_to_read) {
        buffer = cs~load_uint(bits_to_read);
        buffer_len = bits_to_read;
      }
    }
  }

  if (cs.slice_refs()) {
    builder inner_b = rec(flag, flag_len, value, buffer, buffer_len, cs.preload_ref());

    preb = preb._store_builder_ref(inner_b);
    ;; if (preb.builder_bits() + inner_b.builder_bits() < 1024) {
    ;;   preb = preb.store_builder(inner_b);
    ;; } else {
    ;;   preb = preb._store_builder_ref(inner_b);
    ;; }
  } elseif (buffer_len > 0) {
    if (preb.builder_bits() + buffer_len < 1024) {  ;; + 1 < 1024
      preb = preb.store_uint(buffer, buffer_len);
    } else {
      ;; stack~tpush(preb);
      ;; stack_len += 1;
      ;; preb = begin_cell().store_uint(buffer, buffer_len);
      preb = preb._store_builder_ref(begin_cell().store_uint(buffer, buffer_len));
    }
  }

  ;; stack~touch();
  repeat (stack_len) {
    builder parent = stack~pop_back();
    preb = parent._store_builder_ref(preb);
  }

  return preb;
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  int flag_len = ubitsize(flag);

  builder ans = rec(flag, flag_len, value, 0, 0, linked_list);

  return ans.end_cell();
}
